<?xml version="1.0"?>
<facelet-taglib version="2.0"
                xmlns="http://java.sun.com/xml/ns/javaee"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd">

    <namespace>http://primefaces.org/ui/extensions</namespace>

    <!-- Functions -->
    <function>
        <function-name>escapeSelector</function-name>
        <function-class>org.primefaces.extensions.util.ComponentUtils</function-class>
        <function-signature>java.lang.String escapeSelector(java.lang.String)</function-signature>
    </function>

    <function>
        <function-name>escapeHtml4</function-name>
        <function-class>org.apache.commons.lang3.StringEscapeUtils</function-class>
        <function-signature>java.lang.String escapeHtml4(java.lang.String)</function-signature>
    </function>
    <function>
        <function-name>unescapeHtml4</function-name>
        <function-class>org.apache.commons.lang3.StringEscapeUtils</function-class>
        <function-signature>java.lang.String unescapeHtml4(java.lang.String)</function-signature>
    </function>

    <function>
        <function-name>escapeHtml3</function-name>
        <function-class>org.apache.commons.lang3.StringEscapeUtils</function-class>
        <function-signature>java.lang.String escapeHtml3(java.lang.String)</function-signature>
    </function>
    <function>
        <function-name>unescapeHtml3</function-name>
        <function-class>org.apache.commons.lang3.StringEscapeUtils</function-class>
        <function-signature>java.lang.String unescapeHtml3(java.lang.String)</function-signature>
    </function>

    <function>
        <function-name>escapeXml</function-name>
        <function-class>org.apache.commons.lang3.StringEscapeUtils</function-class>
        <function-signature>java.lang.String escapeXml(java.lang.String)</function-signature>
    </function>
    <function>
        <function-name>unescapeXml</function-name>
        <function-class>org.apache.commons.lang3.StringEscapeUtils</function-class>
        <function-signature>java.lang.String unescapeXml(java.lang.String)</function-signature>
    </function>

    <function>
        <function-name>encodeURL</function-name>
        <function-class>org.primefaces.extensions.util.URLEncoderWrapper</function-class>
        <function-signature>java.lang.String encode(java.lang.String)</function-signature>
    </function>

    <!-- Converters -->
    <tag>
        <tag-name>convertJson</tag-name>
        <converter>
            <converter-id>org.primefaces.extensions.converter.JsonConverter</converter-id>
        </converter>
        <attribute>
            <description>
                <![CDATA[Data type of the value object (optional). Any primitive type, array, non generic or generic type is supported. Data type is sometimes required to convert a value to a JSON representation. All data types should be fully qualified. Default is null.]]>
            </description>
            <name>type</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>convertLocale</tag-name>
        <converter>
            <converter-id>org.primefaces.extensions.converter.LocaleConverter</converter-id>
        </converter>
        <attribute>
            <description>
                <![CDATA[Character which will be used to separate the country and language. Default is '_'.]]>
            </description>
            <name>separator</name>
            <required>false</required>
            <type>java.lang.Character</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>convertTimelineEvents</tag-name>
        <converter>
            <converter-id>org.primefaces.extensions.converter.TimelineEventsConverter</converter-id>
        </converter>
    </tag>

    <!-- Behaviors -->
    <tag>
        <tag-name>javascript</tag-name>
        <behavior>
            <behavior-id>org.primefaces.extensions.behavior.JavascriptBehavior</behavior-id>
            <handler-class>org.primefaces.extensions.behavior.javascript.JavascriptBehaviorHandler</handler-class>
        </behavior>
        <attribute>
            <description><![CDATA[The javascript which should be executed.]]>
            </description>
            <name>execute</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the behavior, when set to false behavior will not be rendered.]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[The name of the event.]]>
            </description>
            <name>event</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>

    <!-- Components -->
    <tag>
        <description>
            <![CDATA[NOTICE: You must also include the org.primefaces.extensions.resources-ckeditor:*.jar artifact. Client behavior events: save - fired when the save button will be pressed (javax.faces.event.AjaxBehaviorEvent), initialize - fired after the editor was successfully intialized (javax.faces.event.AjaxBehaviorEvent), focus - fired when the editor gets focus (javax.faces.event.AjaxBehaviorEvent), blur - fired when the editor loses focus (javax.faces.event.AjaxBehaviorEvent), wysiwygMode - fired after switching to the wysiwyg mode (javax.faces.event.AjaxBehaviorEvent), sourceMode - fired after switching to the source mode (javax.faces.event.AjaxBehaviorEvent), dirty - fired after the content has been changed wihout leaving the editor focus (javax.faces.event.AjaxBehaviorEvent), change - fired after blur and if the content has been changed (javax.faces.event.AjaxBehaviorEvent).]]>
        </description>
        <tag-name>ckEditor</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.CKEditor</component-type>
            <renderer-type>org.primefaces.extensions.component.CKEditorRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Value of the component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description><![CDATA[Height of the editor. Default value: 200px.]]>
            </description>
            <name>height</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Width of the editor. Default value: 600px.]]>
            </description>
            <name>width</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Theme of the editor.]]>
            </description>
            <name>theme</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Skin of the editor. Valid skins are: kama and moono.]]>
            </description>
            <name>skin</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The toolbar layout.]]>
            </description>
            <name>toolbar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines if the editor is readOnly.]]>
            </description>
            <name>readOnly</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[The color of the interface. For example: #33fc14.]]>
            </description>
            <name>interfaceColor</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Default language is used in case no language is set using language option and the editor is not able to use the user language.]]>
            </description>
            <name>language</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This setting is used to set the CKEditor language. In case this option is not set, the editor will automatically try to load with user language if supported, otherwise the default language will be used.]]>
            </description>
            <name>defaultLanguage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[This setting specifies the CSS file to be used to apply style to the contents.]]>
            </description>
            <name>contentsCss</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Path to a custom CKEditor js config file.]]>
            </description>
            <name>customConfig</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The tab index to assign to the editor. If not given, no tab index will be assigned.]]>
            </description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A display name for this component.]]>
            </description>
            <name>label</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.]]>
            </description>
            <name>converter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description><![CDATA[Marks component as required.]]>
            </description>
            <name>required</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines if the content of the component should be escaped or not.]]></description>
            <name>escape</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when required field validation fails.]]></description>
            <name>requiredMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when conversion fails.]]></description>
            <name>converterMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when validation fails.]]></description>
            <name>validatorMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method expression referring to a method validationg the input.]]></description>
            <name>validator</name>
            <required>false</required>
            <type>javax.faces.validator.Validator</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[NOTICE: You must also include the org.primefaces.extensions.resources-codemirror:*.jar artifact. Client behavior events: change - fired every time the content of the editor is changed (javax.faces.event.AjaxBehaviorEvent), highlightComplete - fired whenever the editor's content has been fully highlighted (javax.faces.event.AjaxBehaviorEvent), focus - fired when the editor gets focus (javax.faces.event.AjaxBehaviorEvent), blur - fired when the editor loses focus (javax.faces.event.AjaxBehaviorEvent).]]>
        </description>
        <tag-name>codeMirror</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.CodeMirror</component-type>
            <renderer-type>org.primefaces.extensions.component.CodeMirrorRenderer</renderer-type>
            <handler-class>org.primefaces.extensions.component.codemirror.CodeMirrorHandler</handler-class>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Value of the component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
<attribute>
<description><![CDATA[Method providing suggestions.]]></description>
<name>completeMethod</name>
<required>false</required>
<type>javax.el.MethodExpression</type>
</attribute>
        <attribute>
            <description><![CDATA[The theme to style the editor with.]]>
            </description>
            <name>theme</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The mode to use. When not given, this will default to the first mode that was loaded. It may be a string, which either simply names the mode or is a MIME type associated with the mode. Alternatively, it may be an object containing configuration options for the mode, with a name property that names the mode (for example {name: "javascript", json: true}).]]>
            </description>
            <name>mode</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[How many spaces a block (whatever that means in the edited language) should be indented. The default is 2.]]>
            </description>
            <name>indentUnit</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Whether to use the context-sensitive indentation that the mode provides (or just indent the same as the line before). Defaults to true.]]>
            </description>
            <name>smartIndent</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[The width of a tab character. Defaults to 4.]]>
            </description>
            <name>tabSize</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Configures whether the editor should re-indent the current line when a character is typed that might change its proper indentation (only works if the mode supports indentation). Default is true.]]>
            </description>
            <name>electricChars</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Configures the keymap to use. The default is "default", which is the only keymap defined in codemirror.js itself. Extra keymaps are found in the keymap directory.]]>
            </description>
            <name>keyMap</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll).]]>
            </description>
            <name>lineWrapping</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Whether to show line numbers to the left of the editor.]]>
            </description>
            <name>lineNumbers</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[At which number to start counting lines. Default is 1.]]>
            </description>
            <name>firstLineNumber</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Can be used to force a 'gutter' (empty space on the left of the editor) to be shown even when no line numbers are active. This is useful for setting markers.]]>
            </description>
            <name>gutter</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[When enabled (off by default), this will make the gutter stay visible when the document is scrolled horizontally.]]>
            </description>
            <name>fixedGutter</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This disables editing of the editor content by the user. If the special value "nocursor" is given (instead of simply true), focusing of the editor is also disallowed.]]>
            </description>
            <name>readOnly</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Determines whether brackets are matched whenever the cursor is moved next to a bracket.]]>
            </description>
            <name>matchBrackets</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Highlighting is done by a pseudo background-thread that will work for workTime milliseconds, and then use timeout to sleep for workDelay milliseconds. The defaults are 200 and 300, you can change these options to make the highlighting more or less aggressive.]]>
            </description>
            <name>workTime</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Highlighting is done by a pseudo background-thread that will work for workTime milliseconds, and then use timeout to sleep for workDelay milliseconds. The defaults are 200 and 300, you can change these options to make the highlighting more or less aggressive.]]>
            </description>
            <name>workDelay</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates how quickly CodeMirror should poll its input textarea for changes. Most input is captured by events, but some things, like IME input on some browsers, doesn't generate events that allow CodeMirror to properly detect it. Thus, it polls. Default is 100 milliseconds.]]>
            </description>
            <name>pollInterval</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[The maximum number of undo levels that the editor stores. Defaults to 40.]]>
            </description>
            <name>undoDepth</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[The tab index to assign to the editor. If not given, no tab index will be assigned.]]>
            </description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A display name for this component.]]>
            </description>
            <name>label</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Can be used to specify extra keybindings for the editor. When given, should be an object with property names like Ctrl-A, Home, and Ctrl-Alt-Left.]]>
            </description>
            <name>extraKeys</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.]]>
            </description>
            <name>converter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description><![CDATA[Component(s) to process partially instead of whole view.]]>
            </description>
            <name>process</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Javascript handler to execute before ajax request is begins.]]>
            </description>
            <name>onstart</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Javascript handler to execute when ajax request is completed.]]>
            </description>
            <name>oncomplete</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Javascript handler to execute when ajax request fails.]]>
            </description>
            <name>onerror</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Javascript handler to execute when ajax request succeeds.]]>
            </description>
            <name>onsuccess</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus. Default value: true.]]>
            </description>
            <name>global</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[When set to true, ajax requests are not queued. Default value: false.]]>
            </description>
            <name>async</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines if the content of the component should be escaped or not.]]></description>
            <name>escape</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines if the suggestions should be escaped or not.]]></description>
            <name>escapeSuggestions</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Marks component as required.]]>
            </description>
            <name>required</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[DynaForm allows to show a dynamic form described by model.]]></description>
        <tag-name>dynaForm</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.DynaForm</component-type>
            <renderer-type>org.primefaces.extensions.component.DynaFormRenderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIOutput</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Instance of type DynaFormModel representing model of this component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the request-scoped variable for the underlaying object for each iteration.]]>
            </description>
            <name>var</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the request-scoped variable which contains the prefix of the client Id within pe:dynaFormControl. This property allows to get the whole clientId of a component within pe:dynaFormControl. The whole client Id is sometimes required for JavaScript or RequestContext.update(...).]]>
            </description>
            <name>varContainerId</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag whether the form has to be submitted automatically after current page has been loaded. Note: the form can be submitted if it contains at least one submit button. Default value is false.]]>
            </description>
            <name>autoSubmit</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag whether the extended grid has to be shown opened on page load. Default value is false.]]>
            </description>
            <name>openExtended</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Button bar position. Possible values are "top" | "bottom" | "both". Default value is "bottom".]]>
            </description>
            <name>buttonBarPosition</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style of the main container element. Default value is null.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style class of the main container element. Default value is null.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Specifies a control for a certain typed element within DynaForm.]]></description>
        <tag-name>dynaFormControl</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.UIDynaFormControl</component-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIOutput</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Type corresponding to form control. Default value is "default".]]>
            </description>
            <name>type</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Provided reference between label and corresponding control like "for" attribute in h:outputLabel or p:outputLabel. Default value is null.]]>
            </description>
            <name>for</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style class of the container element for this control. Default value is null.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[FluidGrid is a grid layout library. Client behavior events: layoutComplete - fired after a layout and all positioning transitions have been completed. (org.primefaces.extensions.event.LayoutCompleteEvent).]]></description>
        <tag-name>fluidGrid</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.FluidGrid</component-type>
            <renderer-type>org.primefaces.extensions.component.FluidGridRenderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIOutput</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Collection of items (FluidGridItem) representing model of this component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the request-scoped variable for the underlaying object for each iteration.]]>
            </description>
            <name>var</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the request-scoped variable which contains the prefix of the client Id within pe:fluidGridItem. This property allows to get the whole clientId of a component within pe:dynaFormControl. The whole client Id is sometimes required for JavaScript or RequestContext.update(...).]]>
            </description>
            <name>varContainerId</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style of the main container element. Default value is null.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style class of the main container element. Default value is null.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Horizontal space between item elements (interpreted as pixels). Default is 0.]]>
            </description>
            <name>hGutter</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Vertical space between item elements (interpreted as pixels). Default is 0.]]>
            </description>
            <name>vGutter</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Sets the width of the container to fit the available number of columns, based on the size of container's parent element. When enabled, you can center the container with CSS. Note: This option does not work with percentage width of items. Default is false.]]>
            </description>
            <name>fitWidth</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Controls the horizontal flow of the layout. By default, item elements start positioning at the left. Set to false for right-to-left layouts.]]>
            </description>
            <name>originLeft</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Controls the vertical flow of the layout. By default, item elements start positioning at the top. Set to false for bottom-up layouts. It's like Tetris!]]>
            </description>
            <name>originTop</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Binds layout to window resizing. It binds layout only when the Masonry instance is first initialized. You can bind and unbind resize layout afterwards with the bindResize and unbindResize client-side widget's methods. Default is true.]]>
            </description>
            <name>resizeBound</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies which elements are stamped within the layout. These are special layout elements which will not be laid out. Rather, FluidGrid will layout item elements below stamped elements. You can use here every search expressions supported by PrimeFaces Search Expression Framework. Default is null.]]>
            </description>
            <name>stamp</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Duration of the transition when items change position or appearance, set in a CSS time format. To disable all transitions, set this attribute to 0. Default is 0.4s.]]>
            </description>
            <name>transitionDuration</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Specifies an item for a certain typed element within FluidGrid.]]></description>
        <tag-name>fluidGridItem</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.UIFluidGridItem</component-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIOutput</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Type corresponding to FluidGridItem. Default value is "default".]]>
            </description>
            <name>type</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style class of the container element for this item. Default value is null.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>exporter</tag-name>
        <handler-class>
            org.primefaces.extensions.component.exporter.ExporterTagHandler
        </handler-class>
        <attribute>
            <description>Server side id of the DataTable/DataList whose data would be exported.</description>
            <name>target</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Export type: "pdf","xlsx".</description>
            <name>type</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Filename of the generated export file, defaults to DataTable/DataList server side id.</description>
            <name>fileName</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Table/List header title to use.</description>
            <name>tableTitle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Exports only current page instead of whole dataset.</description>
            <name>pageOnly</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>PreProcessor for the exported document.</description>
            <name>preProcessor</name>
            <required>false</required>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>PostProcessor for the exported document.</description>
            <name>postProcessor</name>
            <required>false</required>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>Character encoding to use.</description>
            <name>encoding</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>When enabled, only selection would be exported.</description>
            <name>selectionOnly</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>When enabled, subtable would be exported.</description>
            <name>subTable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>Facet background to use.Ex:Hex Colors like #FFFF00,#FF0000... </description>
            <name>facetBackground</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Facet font size to use.Ex:10,12..</description>
            <name>facetFontSize</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Facet font color to use.Hex Colors like #FFFF00,#FF0000... </description>
            <name>facetFontColor</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Facet Font Style to use.Ex:normal,bold,italic.Default value is Bold</description>
            <name>facetFontStyle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Font Name/Font family to use.Ex:Courier New,Verdana..</description>
            <name>fontName</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Cell Font size to use.Ex:10,12</description>
            <name>cellFontSize</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Cell Font Color to use.Ex:Hex Colors like #FFFF00,#FF0000... </description>
            <name>cellFontColor</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Cell Font style to use.Ex:normal,bold,italic.Default value is normal</description>
            <name>cellFontStyle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Spacing between multiple DataTables/DataLists</description>
            <name>datasetPadding</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>PDF format orientation.Possible values are Portrait or Landscape.Default value:Portrait</description>
            <name>orientation</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>head</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.Head</component-type>
            <renderer-type>org.primefaces.extensions.component.HeadRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIOutput</type>
        </attribute>
        <attribute>
            <description><![CDATA[The page title.]]>
            </description>
            <name>title</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The shortcut icon.]]>
            </description>
            <name>shortcutIcon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Widget for selecting a rectangular area of an image. Client behavior events: selectEnd - fired after the selection finished (org.primefaces.extensions.event.ImageAreaSelectEvent), selectStart - fired after the selection started (org.primefaces.extensions.event.ImageAreaSelectEvent), selectChange - fired after the selection changed (org.primefaces.extensions.event.ImageAreaSelectEvent).]]>
        </description>
        <tag-name>imageAreaSelect</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.ImageAreaSelect</component-type>
            <renderer-type>org.primefaces.extensions.component.ImageAreaSelectRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The target image.]]>
            </description>
            <name>for</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A string of the form "width:height" which represents the aspect ratio to maintain. Example: "4:3".]]>
            </description>
            <name>aspectRatio</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If set to true, selection area will disappear when selection ends. Default value: false.]]>
            </description>
            <name>autoHide</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If set to a number greater than zero, showing or hiding the plugin is done with a graceful fade in/fade out animation. Default value: 0.]]>
            </description>
            <name>fadeSpeed</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If set to true, resize handles are shown on the selection area; if set to "corners", only corner handles are shown. Default value: false.]]>
            </description>
            <name>handles</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[If set to true, selection area is hidden.]]>
            </description>
            <name>hide</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[True height of the image (if scaled with the CSS width and height properties).]]>
            </description>
            <name>imageHeight</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[True width of the image (if scaled with the CSS width and height properties).]]>
            </description>
            <name>imageWidth</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[Determines whether the selection area should be movable. Default value: true.]]>
            </description>
            <name>movable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If set to true, clicking outside the selection area will not start a new selection (ie. the user will only be able to move/resize the existing selection area). Default value: false.]]>
            </description>
            <name>persistent</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Determines whether the selection area should be resizable. Default value: true.]]>
            </description>
            <name>resizable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[If set to true, selection area is shown.]]>
            </description>
            <name>show</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The z-index value to be assigned to plugin elements; normally, imgAreaSelect figures it out automatically, but there are a few cases when it's necessary to set it explicitly.]]>
            </description>
            <name>zIndex</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[Maximum selection height (in pixels).]]>
            </description>
            <name>maxHeight</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[Maximum selection width (in pixels).]]>
            </description>
            <name>maxWidth</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[Minimum selection height (in pixels).]]>
            </description>
            <name>minHeight</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[Minimum selection width (in pixels).]]>
            </description>
            <name>minWidth</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A jQuery object or selector string that specifies the parent element that the plugin will be appended to. Default value: "body".]]>
            </description>
            <name>parentSelector</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Enables/disables keyboard support. Default value: false.]]>
            </description>
            <name>keyboardSupport</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Widget for rotating or resizing an image. Client behavior events: rotate - fired after image rotation (org.primefaces.extensions.event.RotateEvent), resize - fired after image resizing (org.primefaces.extensions.event.ResizeEvent).]]>
        </description>
        <tag-name>imageRotateAndResize</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.ImageRotateAndResize</component-type>
            <renderer-type>org.primefaces.extensions.component.ImageRotateAndResizeRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The target image.]]>
            </description>
            <name>for</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[RemoteCommand provides a way to execute JSF backing bean methods directly from javascript.]]>
        </description>
        <tag-name>remoteCommand</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.RemoteCommand</component-type>
            <renderer-type>org.primefaces.extensions.component.RemoteCommandRenderer</renderer-type>
            <handler-class>org.primefaces.extensions.component.remotecommand.RemoteCommandHandler</handler-class>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Label of the component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description><![CDATA[An actionlistener to process when command is executed.]]>
            </description>
            <name>actionListener</name>
            <required>false</required>
            <type>javax.faces.event.ActionListener</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method expression or a string outcome to process when command is executed.]]>
            </description>
            <name>action</name>
            <required>false</required>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value that determines the phaseId of the action event, when true actions are processed at "Apply Request Values", when false at "Invoke Application" phase.]]>
            </description>
            <name>immediate</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the command.]]>
            </description>
            <name>name</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Component(s) to update with ajax.]]>
            </description>
            <name>update</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Component(s) to process partially instead of whole view.]]>
            </description>
            <name>process</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Javascript handler to execute before ajax request is begins.]]>
            </description>
            <name>onstart</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Javascript handler to execute when ajax request is completed.]]>
            </description>
            <name>oncomplete</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Javascript handler to execute when ajax request fails.]]>
            </description>
            <name>onerror</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Javascript handler to execute when ajax request succeeds.]]>
            </description>
            <name>onsuccess</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus. Default value: true.]]>
            </description>
            <name>global</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[When set to true, ajax requests are not queued. Default value: false.]]>
            </description>
            <name>async</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[When enabled, only values related to partially processed components would be serialized for ajax instead of whole form.]]></description>
            <name>partialSubmit</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[When set to true, command will be invoked on page load.]]>
            </description>
            <name>autoRun</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[AssignableParam can be used the apply a parameter of the RemoteCommand to a backing bean.]]>
        </description>
        <tag-name>assignableParam</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.AssignableParameter</component-type>
            <handler-class>org.primefaces.extensions.component.parameters.AssignableParameterHandler</handler-class>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the parameter.]]>
            </description>
            <name>name</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[ValueExpression where the parameter will be applied.]]>
            </description>
            <name>assignTo</name>
            <required>true</required>
            <type>javax.el.ValueExpression</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.]]>
            </description>
            <name>converter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Method can be used to receive a parameter of the RemoteCommand in the actionListener or action method.]]>
        </description>
        <tag-name>methodParam</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.MethodParameter</component-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the parameter.]]>
            </description>
            <name>name</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.]]>
            </description>
            <name>converter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]>
        </description>
        <tag-name>methodSignature</tag-name>
        <handler-class>org.primefaces.extensions.component.parameters.MethodSignatureTagHandler</handler-class>
        <attribute>
            <description>
                <![CDATA[A comma separated list with full qualified class names. Class names should match passed parameters in the same order as they were defined.]]>
            </description>
            <name>parameters</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Advanced Tooltip component.]]>
        </description>
        <tag-name>tooltip</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.Tooltip</component-type>
            <renderer-type>org.primefaces.extensions.component.TooltipRenderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Value of the component than can be either an EL expression of a literal text.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression or a literal text that defines a converter for the component.]]>
            </description>
            <name>converter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A global tooltip converts each title attribute to a tooltip. Default value is false.]]>
            </description>
            <name>global</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A shared tooltip - one tooltip, multiple targets. Default value is false.]]>
            </description>
            <name>shared</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This flag enables showing tooltips automatically after page loading. Auto shown tooltips can not be global or shared. Default value is false.]]>
            </description>
            <name>autoShow</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This flag enables tooltip's positioning in relation to the mouse. Default value is false.]]>
            </description>
            <name>mouseTracking</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[When set to true, the tooltip will not hide if moused over, allowing the contents to be clicked and interacted with. Default value is false.]]>
            </description>
            <name>fixed</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A positive or negative pixel value by which to offset the tooltip in the horizontal plane (x-axis). Negative values cause a reduction in the value (moves tooltip to the left). Default value is 0.]]>
            </description>
            <name>adjustX</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A positive or negative pixel value by which to offset the tooltip in the vertical plane (y-axis). Negative values cause a reduction in the value (moves tooltip upwards). Default value is 0.]]>
            </description>
            <name>adjustY</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The corner of the target element to position the tooltips corner at. Default value is 'bottom right'.]]>
            </description>
            <name>atPosition</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The corner of the tooltip to position in relation to the target element. Default value is 'top left'.]]>
            </description>
            <name>myPosition</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Event displaying the tooltip. Default value is mouseenter.]]>
            </description>
            <name>showEvent</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Delay time for displaying the tooltip. Default value is 0.]]>
            </description>
            <name>showDelay</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Effect to be used for displaying. Default value is fadeIn.]]>
            </description>
            <name>showEffect</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Time in milliseconds to display the effect. Default value is 500.]]>
            </description>
            <name>showEffectLength</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Event hiding the tooltip. Default value is mouseleave.]]>
            </description>
            <name>hideEvent</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Delay time for hiding the tooltip. Default value is 0.]]>
            </description>
            <name>hideDelay</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Effect to be used for hiding. Default value is fadeOut.]]>
            </description>
            <name>hideEffect</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Time in milliseconds to process the hide effect. Default value is 500.]]>
            </description>
            <name>hideEffectLength</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Id of the component to attach the tooltip.]]>
            </description>
            <name>for</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Page Layout component. Client behavior events: open - fires after a layout pane gets opened (org.primefaces.extensions.event.OpenEvent), close - fires after a layout pane gets closed (org.primefaces.extensions.event.CloseEvent), resize - fires after a layout pane gets resized (org.primefaces.extensions.event.ResizeEvent).]]>
        </description>
        <tag-name>layout</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.Layout</component-type>
            <renderer-type>org.primefaces.extensions.component.LayoutRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]></description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]></description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]></description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies whether layout should span all page or not. Default value is true.]]></description>
            <name>fullPage</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Layout options as an instance of the class LayoutOptions or an JSON String representing serialized LayoutOptions. LayoutOptions created as Java model takes precedence over layout options as tag attributes. Serializing of layout options to an JSON string can increase the time of layout building when the layout is built during application startup in an application scoped bean (LayoutOptions gets always serialized to JSON to be able to be used in the underlying widget). Use the method toJson() in the LayoutOptions if you want to serialize all options to an JSON string.]]>
            </description>
            <name>options</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style of the main Layout container element. Default value is null.]]></description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style class of the main Layout container element. Default value is null.]]></description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates server-side state management. A hash (JSON string) containing all dimensions and close, open state of existing layout panes. It can be bound to a bean.]]>
            </description>
            <name>state</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates client-side state management. When set to true the current layout state will be stored in cookies on window unload and restored during layout build-up when user enters the same page. Default is false.]]>
            </description>
            <name>stateCookie</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Tip when resizer-bar can be dragged to resize a pane. Default is 'Resize'.]]>
            </description>
            <name>resizerTip</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Tip on toggler when pane is 'open'. Default is 'Close'.]]>
            </description>
            <name>togglerTipOpen</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Tip on toggler when pane is 'closed'. Default is 'Open'.]]>
            </description>
            <name>togglerTipClosed</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Useful flag if you are dealing with iframes or objects like applets inside layout panes. This option triggers masking each time the mouse moves over a resizer - instead of waiting until your 'grab it' with your mouse. This is done just in case you are about to grab & drag the resizer. Enabling this avoids the slight delay that sometimes occurs when you quickly grab a resizer and try to drag over an iframe or object. Default is false.]]>
            </description>
            <name>maskPanesEarly</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Layout pane within Layout component. 5 regions are supported: 'north', 'south', 'center', 'west' und 'east'.]]>
        </description>
        <tag-name>layoutPane</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.LayoutPane</component-type>
            <renderer-type>org.primefaces.extensions.component.LayoutPaneRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]></description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]></description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Position of a pane. Possible values are 'north', 'south', 'west', 'east', 'center'. Default value is 'center'.]]>
            </description>
            <name>position</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style of the pane's header. Default value is null.]]>
            </description>
            <name>styleHeader</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style class of the pane's header. Default value is null.]]>
            </description>
            <name>styleClassHeader</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style of the pane's content. Default value is null.]]>
            </description>
            <name>styleContent</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style class of the pane's content. Default value is null.]]>
            </description>
            <name>styleClassContent</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Makes a pane resizable. Default is true.]]>
            </description>
            <name>resizable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Makes a pane closable. Default is true.]]>
            </description>
            <name>closable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies the initial size of a pane in px or %. Default value is null.]]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the minimum-size limit in px or % when resizing a pane. Default value is null.]]>
            </description>
            <name>minSize</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the maximum-size limit in px or % when resizing a pane. Default value is null.]]>
            </description>
            <name>maxSize</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the minimum-width limit in px or % when resizing a pane. Default value is null - as small as pane can go.]]>
            </description>
            <name>minWidth</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the maximum-width limit in px or % when resizing a pane. Default value is null - as large as pane can go.]]>
            </description>
            <name>maxWidth</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the minimum-height limit in px or % when resizing a pane. Default value is null - as small as pane can go.]]>
            </description>
            <name>minHeight</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the maximum-height limit in px or % when resizing a pane. Default value is null - as large as pane can go.]]>
            </description>
            <name>maxHeight</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Spacing in px between pane and adjacent pane - when pane is 'open'. Default value is 6.]]>
            </description>
            <name>spacingOpen</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Spacing in px between pane and adjacent pane - when pane is 'closed'. Default value is 6.]]>
            </description>
            <name>spacingClosed</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[If true, then pane is 'closed' when layout is created. Default is false.]]>
            </description>
            <name>initClosed</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[If true, then pane is hidden when layout is created - no resizer or spacing is visible, as if the pane does not exist. Default is false.]]>
            </description>
            <name>initHidden</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[If true, then pane gets resized live while it is dragging. If false, only helper element shows resizing. Default is false.]]>
            </description>
            <name>resizeWhileDragging</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Useful flag if you are dealing with iframes inside layout panes. If true, this option adds a DIV-mask over-or-inside this pane, so user can drag (resize) the pane over iframe. Default is false.]]>
            </description>
            <name>maskContents</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Useful flag if you are dealing with objects like applets inside layout panes. If true, this option add IFRAME-mask over-or-inside this pane to cover objects / applets - content-mask will overlay this mask. Default is false.]]>
            </description>
            <name>maskObjects</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[MasterDetail component allows to group contents into levels (sections) and saves page space. Smart and flexible navigation between levels via breadcrumbs or command components gives a neat and stylish interface for users.]]>
        </description>
        <tag-name>masterDetail</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.MasterDetail</component-type>
            <renderer-type>org.primefaces.extensions.component.MasterDetailRenderer</renderer-type>
            <handler-class>org.primefaces.extensions.component.masterdetail.MasterDetailTagHandler</handler-class>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Current level in flow. It can be arbitrary initialized and gets updated with each navigation. It allows to show any initial level when a view with MasterDetail component(s) is displayed. Default is 1.]]>
            </description>
            <name>level</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Context value for the current level. It can be arbitrary initialized at beginning and gets updated with each navigation. Default is null.]]>
            </description>
            <name>contextValue</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Method with signature int methodName(SelectLevelEvent). Server-side listener invoking when a navigation attempt takes place (via pe:selectDetailLevel). Return value defines the level to go. Default is null.]]>
            </description>
            <name>selectLevelListener</name>
            <required>false</required>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag whether a breadcrumb navigation is shown or not. Default is true.]]>
            </description>
            <name>showBreadcrumb</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Per default breadcrumb items right from the current level are not shown. This flag allows to show all breadcrumb items right from the current level as disabled. Default is false.]]>
            </description>
            <name>showAllBreadcrumbItems</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean flag to allow rendering of breadcrumb above or below header facet. Default is true.]]>
            </description>
            <name>breadcrumbAboveHeader</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style of the main MasterDetail container element. Default is null.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style class of the main MasterDetail container element. Default is null.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>masterDetailLevel</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.MasterDetailLevel</component-type>
            <handler-class>org.primefaces.extensions.component.masterdetail.MasterDetailLevelTagHandler</handler-class>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Level of this detail. Level is unique inside of masterDetail component. This is a required attribute. Default is none.]]>
            </description>
            <name>level</name>
            <required>true</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Variable to access the value set by pe:selectDetailLevel when the level is changed. If the value was not set by currently invoking pe:selectDetailLevel, the last set value is be used. Default is null.]]>
            </description>
            <name>contextVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Label for the corresponding breadcrumb item shown on top. Default is none.]]>
            </description>
            <name>levelLabel</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating whether the breadcrumb item is disabled (not clickable). Default is dalse.]]>
            </description>
            <name>levelDisabled</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>selectDetailLevel</tag-name>
        <handler-class>org.primefaces.extensions.component.masterdetail.SelectDetailLevelTagHandler</handler-class>
        <attribute>
            <description>
                <![CDATA[Context value passing to the level to be navigated. Value defined here is accessible by contextVar in MasterDetailLevel. Default is none.]]>
            </description>
            <name>contextValue</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Listener method which is fired before action / actionListener of component, pe:selectDetailLevel is attached to, gets called. Return value of this listener is used as a new / modified contextValue. The listener allows to pass a new / modified contextValue between levels. Default is none.]]>
            </description>
            <name>listener</name>
            <required>false</required>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Level to go to. Default is none.]]>
            </description>
            <name>level</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies how many steps to go. Can be negative. If level and step are not specified, then step = 1 is assumed. Default is none.]]>
            </description>
            <name>step</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies comma or blank separated list of clientIds of editable components whose inputs have to be preserved while levels get switched. @all is allowed and means all values within master detail have to be preserved. It makes sense e.g. if corresponding command component has "immediate"=true attribute. If nothing specified, input values gets cleared.]]>
            </description>
            <name>preserveInputs</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies comma or blank separated list of clientIds of editable components whose inputs have to be cleared while levels get switched. @all is allowed and means all values within master detail have to be cleared. It takes precedence over clientIds in preserveInputs.]]>
            </description>
            <name>resetInputs</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name(s) of one or several accepted events of f:ajax / p:ajax in case when SelectDetailLevel is attached to any component with ajax behavior. Several events should be defined as space or comma separated list. If no events are specified, all events will be accepted.]]>
            </description>
            <name>event</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[keyFilter filters keyboard input by for a given input field.]]>
        </description>
        <tag-name>keyFilter</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.KeyFilter</component-type>
            <renderer-type>org.primefaces.extensions.component.KeyFilterRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The target input.]]>
            </description>
            <name>for</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines the regular expression which should be used for filtering the input.]]>
            </description>
            <name>regEx</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the predefined mask which should be used (pint, int, pnum, num, hex, email, alpha, alphanum).]]>
            </description>
            <name>mask</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines a javascript code or function which should be used for filtering.]]>
            </description>
            <name>testFunction</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify if the component also should prevent paste. Default value is true.]]>
            </description>
            <name>preventPaste</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Deprecated tag name, use spotlight name!]]></description>
        <tag-name>blockPanel</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.Spotlight</component-type>
            <renderer-type>org.primefaces.extensions.component.SpotlightRenderer</renderer-type>
        </component>
    </tag>
    <tag>
        <description><![CDATA[spotlight can locks UI.]]></description>
        <tag-name>spotlight</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.Spotlight</component-type>
            <renderer-type>org.primefaces.extensions.component.SpotlightRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style of the main Layout container element. Default value is null.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style class of the main Layout container element. Default value is null.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Boolean value to specify the blocked UI out of panel.]]>
            </description>
            <name>blocked</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[blockUI blocks any piece of page during various Ajax calls.]]></description>
        <tag-name>blockUI</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.BlockUI</component-type>
            <renderer-type>org.primefaces.extensions.component.BlockUIRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Styles for the message when blocking. Styles should be defined as JSON object, e.g. {backgroundColor: 'fff', width: 30%}.]]></description>
            <name>css</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Styles for the overlay. Styles should be defined as JSON object, e.g. {opacity: 0.4, backgroundColor: 'red'}]]></description>
            <name>cssOverlay</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies component(s) which send(s) an ajax request and triggers blocking. If nothing specified, the parent component is used.]]>
            </description>
            <name>source</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies component(s) or HTML element(s) to be blocked. If the target is null or not defined, the entire page is blocked.]]>
            </description>
            <name>target</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Id of the component in terms of findComponent to be used as content shown during blocking. If nothing specified, the content of blockUI component is used.]]>
            </description>
            <name>content</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name(s) of one or several accepted events. Several events should be defined as space or comma separated list.]]>
            </description>
            <name>event</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag whether the blocking is shown automatically without the need to use JavaScript widget. Default value is false.]]>
            </description>
            <name>autoShow</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Time in millis to wait before auto-unblocking. Don't define it or set to 0 to disable auto-unblock. Default value is 0.]]>
            </description>
            <name>timeout</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Set this attribute to true to have the message automatically centered along the X axis. Note: it only effects element blocking (page blocking controlled by CSS via the css attribute). Default value is true.]]>
            </description>
            <name>centerX</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Set this attribute to true to have the message automatically centered along the Y axis. Default value is true.]]>
            </description>
            <name>centerY</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Time picker component for time (hours / minutes) inputs. Client behavior events: timeSelect - fires when an hour / minutes is selected (org.primefaces.extensions.event.TimeSelectEvent), close - fires when the time picker is closed (org.primefaces.extensions.event.CloseEvent), beforeShow - fires before the time picker is rendered and displayed (org.primefaces.extensions.event.BeforeShowEvent).]]>
        </description>
        <tag-name>timePicker</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.TimePicker</component-type>
            <renderer-type>org.primefaces.extensions.component.TimePickerRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]></description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]></description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Value of the component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]></description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Marks component as required.]]></description>
            <name>required</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method expression referring to a method validationg the input.]]></description>
            <name>validator</name>
            <required>false</required>
            <type>javax.faces.validator.Validator</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></description>
            <name>valueChangeListener</name>
            <required>false</required>
            <type>javax.faces.event.ValueChangeListener</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when required field validation fails.]]></description>
            <name>requiredMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when conversion fails.]]></description>
            <name>converterMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when validation fails.]]></description>
            <name>validatorMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Access key to transfer focus to the input element.]]></description>
            <name>accesskey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Alternate textual description of the input element.]]></description>
            <name>alt</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Controls browser autocomplete behavior.]]></description>
            <name>autocomplete</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Direction indication for text that does not inherit directionality.]]></description>
            <name>dir</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Disables the time picker when set to true.]]></description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[A localized user presentable name for this component.]]></description>
            <name>label</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style of the time picker input element.]]></description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style class of the time picker input element.]]></description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The character to use to separate hours and minutes. Default is :.]]></description>
            <name>timeSeparator</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines whether or not to show AM/PM with selected time. Default is false.]]></description>
            <name>showPeriod</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Corner of the dialog to position. Default is 'left top'.]]></description>
            <name>dialogPosition</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Corner of the input to position. Default is 'left bottom'.]]></description>
            <name>inputPosition</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Mode specifies appearance of time picker. Possible values are 'popup', 'spinner', 'inline'. Default is 'spinner'.]]></description>
            <name>mode</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies first displayed hour. Possible range is 0-23. Default is 0.]]></description>
            <name>startHours</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies last displayed hour. Possible range is 0-23. Default is 23.]]></description>
            <name>endHours</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies first displayed minute. Possible range is 0-55. Default is 0.]]></description>
            <name>startMinutes</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies last displayed minute. Possible range is 0-55. Default is 55.]]></description>
            <name>endMinutes</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies interval of displayed minutes. Default is 5.]]></description>
            <name>intervalMinutes</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies number of rows for the input tables, minimum 2, makes more sense if you use multiple of 2. Default is 4.]]></description>
            <name>rows</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines if the hours section is displayed or not. Set to false to get a minute only dialog. Default is true.]]></description>
            <name>showHours</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines if the minutes section is displayed or not. Set to false to get a hours only dialog. Default is true.]]></description>
            <name>showMinutes</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Shows an 'ok' button to confirm the edit. Default is false.]]></description>
            <name>showCloseButton</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Shows the 'deselect' time button. Default is false.]]></description>
            <name>showDeselectButton</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Shows the 'now' button. Default is false.]]></description>
            <name>showNowButton</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines a callback to enable / disable certain hours. Example: function onHourShow(hour). Default is null.]]></description>
            <name>onHourShow</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines a callback to enable / disable certain minutes. Example: function onMinuteShow(hour, minute). Default is null.]]></description>
            <name>onMinuteShow</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Define when the timepicker is shown. 'focus': when the input gets focus, 'button' when the button trigger element is clicked, 'both': when the input gets focus and when the button is clicked. Default is 'focus'.]]></description>
            <name>showOn</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[String or java.util.Locale representing user locale. Default is a locale specified in view root.]]></description>
            <name>locale</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Timeline is an interactive visualization chart to visualize events in time. Client behavior events: add - fired when event is about the be added (org.primefaces.extensions.event.timeline.TimelineAddEvent), change - fired after the user modified the start date or end date of an event by moving / dragging the event in the timeline (org.primefaces.extensions.event.timeline.TimelineModificationEvent), edit - fired when event is about to be edited. This event is fired when the user double clicks on an event (org.primefaces.extensions.event.timeline.TimelineModificationEvent), delete - fired when event is about to be deleted. That means the user clicked on the "delete event" button on the right of an event (org.primefaces.extensions.event.timeline.TimelineModificationEvent), select - fired when the user clicks on an event (org.primefaces.extensions.event.timeline.TimelineSelectEvent), rangechange - fired when the visible range is changing. Fired repeatedly while the user is modifying the visible time by moving / dragging the timeline or by zooming / scrolling (org.primefaces.extensions.event.timeline.TimelineRangeEvent), rangechanged - fired when the visible range has been changed. Fired once after the user has modified the visible time by moving / dragging the timeline or by zooming / scrolling (org.primefaces.extensions.event.timeline.TimelineRangeEvent), lazyload - fired when the events should be lazy loaded. Fired once after the user has modified the visible time by moving / dragging the timeline or by zooming / scrolling (org.primefaces.extensions.event.timeline.TimelineLazyLoadEvent), drop - fired when when an item is dragged and dropped onto the Timeline from outside (org.primefaces.extensions.event.timeline.TimelineDragDropEvent)]]>
        </description>
        <tag-name>timeline</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.Timeline</component-type>
            <renderer-type>org.primefaces.extensions.component.TimelineRenderer</renderer-type>
            <handler-class>org.primefaces.extensions.component.timeline.TimelineTagHandler</handler-class>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Inline style of the component]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Container style class]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An instance of TimelineModel representing the backing model.]]>
            </description>
            <name>value</name>
            <required>true</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the request-scoped variable for underlaying object in the TimelineEvent for each iteration.]]>
            </description>
            <name>var</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[User locale for i18n messages. The attribute can be either a String or Locale object.]]>
            </description>
            <name>locale</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Target time zone to convert start / end dates for displaying. Time zone is useful when you want to display dates in something other than the user's local time zone. The attribute can be either a String or TimeZone object.]]>
            </description>
            <name>timeZone</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Time zone that the user's browser / PC is running in. Allows the correct conversion of start / end dates to the target timeZone for displaying. The attribute can be either a String or TimeZone object. BrowserTimeZone should be provided if TimeZone is provided, or left empty otherwise. BrowserTimeZone defaults to the server's timeZone.]]>
            </description>
            <name>browserTimeZone</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The height of the timeline in pixels, as a percentage, or "auto". When the height is set to "auto", the height of the timeline is automatically adjusted to fit the contents. If not, it is possible that events get stacked so high, that they are not visible in the timeline. When height is set to "auto", a minimum height can be specified with the option minHeight. Default is "auto".]]>
            </description>
            <name>height</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies a minimum height for the Timeline in pixels. Useful when height is set to "auto". Default is 0.]]>
            </description>
            <name>minHeight</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The width of the timeline in pixels or as a percentage. Default is "100%".]]>
            </description>
            <name>width</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Check if the timeline container is resized, and if so, resize the timeline. Useful when the webpage is resized. Default is true.]]>
            </description>
            <name>responsive</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If false, the horizontal axis is drawn at the bottom. If true, the axis is drawn on top. Default is false.]]>
            </description>
            <name>axisOnTop</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The width of the drag areas in pixels. When an event with date range is selected, it has a drag area on the left and right side, with which the start or end dates of the event can be manipulated. Default is 10.]]>
            </description>
            <name>dragAreaWidth</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, the events can be edited, changed, created and deleted. Events can only be editable when the option selectable is true (default). When editable is true, the timeline can fire AJAX events "change", "edit", "add", "delete", "drop".
This global setting "editable" can be overwritten for individual events by setting a value in field "editable". Default is false.]]>
            </description>
            <name>editable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, events on the timeline are selectable. Selectable events can fire AJAX "select" events. Default is true.]]>
            </description>
            <name>selectable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, you can unselect an item by clicking in the empty space of the timeline. If false, you cannot unselect an item, there will be always one item selected. Default is true.]]>
            </description>
            <name>unselectable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, the timeline is zoomable. When the timeline is zoomed, AJAX "rangechange" events are fired. Default is true.]]>
            </description>
            <name>zoomable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, the timeline is movable. When the timeline is moved, AJAX "rangechange" events are fired. Default is true.]]>
            </description>
            <name>moveable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The initial start date for the axis of the timeline. If not provided, the earliest date present in the events is taken as start date. Default is null.]]>
            </description>
            <name>start</name>
            <required>false</required>
            <type>java.util.Date</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The initial end date for the axis of the timeline. If not provided, the latest date present in the events is taken as end date. Default is null.]]>
            </description>
            <name>end</name>
            <required>false</required>
            <type>java.util.Date</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Set a minimum Date for the visible range. It will not be possible to move beyond this minimum. Default is null.]]>
            </description>
            <name>min</name>
            <required>false</required>
            <type>java.util.Date</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Set a maximum Date for the visible range. It will not be possible to move beyond this maximum. Default is null.]]>
            </description>
            <name>max</name>
            <required>false</required>
            <type>java.util.Date</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Set a minimum zoom interval for the visible range in milliseconds. It will not be possible to zoom in further than this minimum. Default is 10.]]>
            </description>
            <name>zoomMin</name>
            <required>false</required>
            <type>java.lang.Long</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Set a maximum zoom interval for the visible range in milliseconds. It will not be possible to zoom out further than this maximum. Default value equals 315360000000000 ms (about 10000 years).]]>
            </description>
            <name>zoomMax</name>
            <required>false</required>
            <type>java.lang.Long</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Preload factor is a positive float value or 0 which can be used for lazy loading of events. When the lazy loading feature is active, the calculated time range for preloading will be multiplicated by the preload factor. The result of this multiplication specifies the additional time range which will be considered for the preloading during moving / zooming too. For example, if the calculated time range for preloading is 5 days and the preload factor is 0.2, the result is 5 * 0.2 = 1 day. That means, 1 day backwards and / or 1 day onwards will be added to the original calculated time range. The event's area to be preloaded is wider then. This helps to avoid frequently, time-consuming fetching of events. Default value is 0.]]>
            </description>
            <name>preloadFactor</name>
            <required>false</required>
            <type>java.lang.Float</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The minimal margin in pixels between events. Default is 10.]]>
            </description>
            <name>eventMargin</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The minimal margin in pixels between events and the horizontal axis. Default is 10.]]>
            </description>
            <name>eventMarginAxis</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the style for the timeline events. Choose from "dot" or "box". Default is "box".]]>
            </description>
            <name>eventStyle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, items can be moved from one group to another. Only applicable when groups are used. Default is true.]]>
            </description>
            <name>groupsChangeable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If false, the groups legend is drawn at the left side of the timeline. If true, the groups legend is drawn on the right side. Default is false.]]>
            </description>
            <name>groupsOnRight</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[By default, the width of the groups legend is adjusted to the group names. A fixed width can be set for the groups legend by specifying the "groupsWidth" as a string, for example "200px". Default is null.]]>
            </description>
            <name>groupsWidth</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, the start and end of an event will be snapped nice integer values when moving or resizing the event. Default is true.]]>
            </description>
            <name>snapEvents</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, the events are stacked above each other to prevent overlapping events. This option cannot be used in combination with grouped events. Default is true.]]>
            </description>
            <name>stackEvents</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, the timeline shows a red, vertical line displaying the current time. Default is true.]]>
            </description>
            <name>showCurrentTime</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[By default, the timeline shows both minor and major date labels on the horizontal axis. For example the minor labels show minutes and the major labels show hours. When "showMajorLabels" is false, no major labels are shown. Default is true.]]>
            </description>
            <name>showMajorLabels</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[By default, the timeline shows both minor and major date labels on the horizontal axis. For example the minor labels show minutes and the major labels show hours. When "showMinorLabels" is false, no minor labels are shown. When both "showMajorLabels" and "showMinorLabels" are false, no horizontal axis will be visible. Default is true.]]>
            </description>
            <name>showMinorLabels</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Show the button "Create new event" in the a navigation menu. Default is false.]]>
            </description>
            <name>showButtonNew</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Show a navigation menu with buttons to move and zoom the timeline. Default is false.]]>
            </description>
            <name>showNavigation</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style class to apply when an acceptable draggable is dragged over. Default is null.]]>
            </description>
            <name>dropHoverStyleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style class to apply when an acceptable draggable is being dragged over. Default is null.]]>
            </description>
            <name>dropActiveStyleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Selector to define the accepted draggables. Default is null.]]>
            </description>
            <name>dropAccept</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Scope key to match draggables and droppables. Default is null.]]>
            </description>
            <name>dropScope</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]>
        </description>
        <tag-name>triStateCheckbox</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.TriStateCheckbox</component-type>
            <renderer-type>org.primefaces.extensions.component.TriStateCheckboxRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Value of the component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.]]>
            </description>
            <name>converter</name>
            <required>false</required>
            <type>java.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]>
            </description>
            <name>immediate</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Marks component as required.]]>
            </description>
            <name>required</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method expression referring to a method validationg the input.]]>
            </description>
            <name>validator</name>
            <required>false</required>
            <type>javax.faces.validator.Validator</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]>
            </description>
            <name>valueChangeListener</name>
            <required>false</required>
            <type>javax.faces.event.ValueChangeListener</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when required field validation fails.]]>
            </description>
            <name>requiredMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when conversion fails.]]>
            </description>
            <name>converterMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when validation fails.]]>
            </description>
            <name>validatorMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Disable the component]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[User label]]>
            </description>
            <name>label</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Callback on change event]]>
            </description>
            <name>onchange</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Inline style of the component]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Coontainer style class]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Icon for StateOne as a css class.]]>
            </description>
            <name>stateOneIcon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Icon for StateTwo as a css class.]]>
            </description>
            <name>stateTwoIcon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Icon for StateThree as a css class.]]>
            </description>
            <name>stateThreeIcon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Label to display next to checkbox.]]>
            </description>
            <name>itemLabel</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Title for StateOne.]]>
            </description>
            <name>stateOneTitle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Title for StateTwo.]]>
            </description>
            <name>stateTwoTitle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Title for StateThree.]]>
            </description>
            <name>stateThreeTitle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The tab index to assign to the component, If not given, tabindex=0 will be assigned.]]>
            </description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]>
        </description>
        <tag-name>triStateManyCheckbox</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.TriStateManyCheckbox</component-type>
            <renderer-type>org.primefaces.extensions.component.TriStateManyCheckboxRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Value of the component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.]]>
            </description>
            <name>converter</name>
            <required>false</required>
            <type>java.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]>
            </description>
            <name>immediate</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Marks component as required.]]>
            </description>
            <name>required</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method expression referring to a method validationg the input.]]>
            </description>
            <name>validator</name>
            <required>false</required>
            <type>javax.faces.validator.Validator</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]>
            </description>
            <name>valueChangeListener</name>
            <required>false</required>
            <type>javax.faces.event.ValueChangeListener</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when required field validation fails.]]>
            </description>
            <name>requiredMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when conversion fails.]]>
            </description>
            <name>converterMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when validation fails.]]>
            </description>
            <name>validatorMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Disable the component.]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[User presentable name.]]>
            </description>
            <name>label</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Layout of the checkboxes, valid values are �lineDirection�(horizontal) and �pageDirection�(vertical).]]>
            </description>
            <name>layout</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Callback on change event.]]>
            </description>
            <name>onchange</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Inline style of the component.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Style class of the main Layout container element. Default value is null.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Icon for StateOne as a css class.]]>
            </description>
            <name>stateOneIcon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Icon for StateTwo as a css class.]]>
            </description>
            <name>stateTwoIcon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Icon for StateThree as a css class.]]>
            </description>
            <name>stateThreeIcon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Title for StateOne.]]>
            </description>
            <name>stateOneTitle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Title for StateTwo.]]>
            </description>
            <name>stateTwoTitle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Title for StateThree.]]>
            </description>
            <name>stateThreeTitle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The tab index to assign to the component, If not given, tabindex=0 will be assigned.]]>
            </description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]>
        </description>
        <tag-name>inputNumber</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.InputNumber</component-type>
            <renderer-type>org.primefaces.extensions.component.InputNumberRenderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Value of the component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.]]>
            </description>
            <name>converter</name>
            <required>false</required>
            <type>java.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]>
            </description>
            <name>immediate</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Marks component as required.]]>
            </description>
            <name>required</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method expression referring to a method validationg the input.]]>
            </description>
            <name>validator</name>
            <required>false</required>
            <type>javax.faces.validator.Validator</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]>
            </description>
            <name>valueChangeListener</name>
            <required>false</required>
            <type>javax.faces.event.ValueChangeListener</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when required field validation fails.]]>
            </description>
            <name>requiredMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when conversion fails.]]>
            </description>
            <name>converterMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when validation fails.]]>
            </description>
            <name>validatorMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Disable the component]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[User label]]>
            </description>
            <name>label</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Callback on change event]]>
            </description>
            <name>onchange</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Inline style of the component]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Coontainer style class]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Decimal separator char. Default is '.'.]]>
            </description>
            <name>decimalSeparator</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Thousand separator char. Default is ','.]]>
            </description>
            <name>thousandSeparator</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Desired symbol or unit. Default is none.]]>
            </description>
            <name>symbol</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Symbol suffix. Default is prefix.]]>
            </description>
            <name>symbolPosition</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Minimum values. Default is 0.00.]]>
            </description>
            <name>minValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Maximum values. Default is 999999999.99.]]>
            </description>
            <name>maxValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Controls the rounding method. Default is Round-Half-Up Symmetric.]]>
            </description>
            <name>roundMethod</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Number of decimal places. Default are taken from minValue and MaxValue.]]>
            </description>
            <name>decimalPlaces</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Controls empty input display behavior, options are empty, zero, sign. Default is empty.]]>
            </description>
            <name>emptyValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Access key to transfer focus to the input element.]]></description>
            <name>accesskey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Alternate textual description of the input element.]]></description>
            <name>alt</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Controls browser autocomplete behavior.]]></description>
            <name>autocomplete</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Direction indication for text that does not inherit directionality.]]></description>
            <name>dir</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A localized user presentable name.]]></description>
            <name>lang</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Maximum number of characters that may be entered in this field.]]></description>
            <name>maxlength</name>
            <required>false</required>
            <type>int</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when input element loses focus.]]></description>
            <name>onblur</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when input element is clicked.]]></description>
            <name>onclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when input element is double clicked.]]></description>
            <name>ondblclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when input element receives focus.]]></description>
            <name>onfocus</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></description>
            <name>onkeydown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></description>
            <name>onkeypress</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when a key is released over input element.]]></description>
            <name>onkeyup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></description>
            <name>onmousedown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></description>
            <name>onmousemove</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></description>
            <name>onmouseout</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></description>
            <name>onmouseover</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></description>
            <name>onmouseup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Client side callback to execute when text within input element is selected by user.]]></description>
            <name>onselect</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Advisory tooltip information.]]></description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Advisory tooltip information.]]></description>
            <name>title</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Util tag to import constants.]]>
        </description>
        <tag-name>importConstants</tag-name>
        <handler-class>org.primefaces.extensions.component.importconstants.ImportConstantsTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The constants class.]]>
            </description>
            <name>className</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The EL variable which can be used to obtain the constants. Default value: Name of the class without package.]]>
            </description>
            <name>var</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Util tag to import enums.]]>
        </description>
        <tag-name>importEnum</tag-name>
        <handler-class>org.primefaces.extensions.component.importenum.ImportEnumTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The enum class.]]>
            </description>
            <name>type</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The EL variable which can be used to obtain the enum values. Default value: Name of the class without package.]]>
            </description>
            <name>var</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The suffix mapping for a array with all enum values. Default value: ALL_VALUES.]]>
            </description>
            <name>allSuffix</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[AjaxErrorHandler catchs AJAX ERRORS and show it in modal window or change.]]></description>
        <tag-name>ajaxErrorHandler</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.AjaxErrorHandler</component-type>
            <renderer-type>org.primefaces.extensions.component.AjaxErrorHandlerRenderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the client side widget. Allows to define widget name on frontend with methods hide() and isVisible(). If XHTML contain more ajaxErrorHandler with widgetWar, every widgetWar is the same JavaScript object]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Exception class name. If type is not defined, ajaxErrorHandler is defined for all exceptions. If type is defined, ajaxErrorHandler is defined for this type exception.]]>
            </description>
            <name>type</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Title text in popup ERROR BOX. Default is: {error-name}.]]>
            </description>
            <name>title</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Body text/html in popup ERROR BOX. Default is: {error-message}.]]>
            </description>
            <name>body</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Button text in popup ERROR BOX. Default is: Reload.]]>
            </description>
            <name>button</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript function for Button in popup ERROR BOX. Default is JavaScript function for RELOAD content.]]>
            </description>
            <name>buttonOnclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript function(error, response). This function is called before construct ERROR BOX on client side. If this function returns FALSE, follows steps are breaked and construct information with description.]]>
            </description>
            <name>onerror</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Waypoint makes it easy to execute a custom logic whenever you scroll to an element. Client behavior events: reached - fired when the user scrolls past the element. (org.primefaces.extensions.event.WaypointEvent)]]></description>
        <tag-name>waypoint</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.Waypoint</component-type>
            <renderer-type>org.primefaces.extensions.component.WaypointRenderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The target component registered as waypoint. If null, the parent component will be taken as target. Default is null.]]>
            </description>
            <name>for</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The context (as component) defines which scrollable element the waypoint belongs to and acts within. Default is window (if no context or contextSelector were specified).]]>
            </description>
            <name>forContext</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Determines how far the top of the element must be from the top of the browser window to trigger a waypoint. It can be a number, which is taken as a number of pixels (can be also negativ, e.g. -10), a string representing a percentage of the viewport height (e.g. '50%') or a function that will return a number of pixels. Default is 0.]]>
            </description>
            <name>offset</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, and multiple waypoints are triggered in one scroll, this waypoint will trigger even if it is not the last waypoint reached. If false, it will only trigger if it is the last waypoint. Default is true.]]>
            </description>
            <name>continuous</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, this waypoint will not trigger if an offset change during a refresh causes it to pass the current scroll point. Default is false.]]>
            </description>
            <name>onlyOnScroll</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, the waypoint will be destroyed when triggered. Default is false.]]>
            </description>
            <name>triggerOnce</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Tag to simulate a java switch.]]></description>
        <tag-name>switch</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.Switch</component-type>
            <renderer-type>org.primefaces.extensions.component.SwitchRenderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Value of the component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Tag which defines a case for the switch component.]]></description>
        <tag-name>case</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.Case</component-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The switch component will check wheter this value is equal to it's value. If so, the childs of this declared case will be rendered.]]>
            </description>
            <name>value</name>
            <required>true</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style will be applied to the switch container div if this case matches. Default value is null.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style class will be applied to the switch container div if this case matches. Default value is null.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Tag which defines the default case for the switch component.]]></description>
        <tag-name>defaultCase</tag-name>
        <component>
            <component-type>org.primefaces.extensions.component.DefaultCase</component-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a namingContainer.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style will be applied to the switch container div if default case is renderend. Default value is null.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Style class will be applied to the switch container div if default case is renderend. Default value is null.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
</facelet-taglib>
