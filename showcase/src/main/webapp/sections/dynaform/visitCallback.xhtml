<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="jakarta.faces.html"
      xmlns:f="jakarta.faces.core"
      xmlns:ui="jakarta.faces.facelets"
      xmlns:showcase="primefaces.extensions.showcase">
<ui:composition template="/templates/showcaseLayout.xhtml">
    <ui:define name="centerContent">
        <f:facet name="header">
            <h:outputText value="DynaForm"/>
        </f:facet>
        <h:panelGroup layout="block" styleClass="centerContent">
            This example demonstrates how to use <strong>ExecutableVisitCallback</strong> - PrimeFaces Extensions'
            implementation of the JSF API's interface <strong>VisitCallback</strong>.
            <strong>ExecutableVisitCallback</strong> uses any class which implements the interface <strong>VisitTaskExecutor</strong>
            (this interface is defined in the PrimeFaces Extensions). This approach allows to visit
            all controls within <strong>pe:dynaForm</strong> and to execute any task on them. By this way,
            we can implement inter-control (inter-cell) communication within <strong>pe:dynaForm</strong>.
            <p/>            
            In this example, we will implement the interface <strong>VisitTaskExecutor</strong> by the class
            <strong>ClearInputsExecutor</strong> which clears all inputs / selects related to one row in <strong>pe:dynaForm</strong>.
            The <strong>ClearInputsExecutor</strong> is instantiated and and set into the <strong>ExecutableVisitCallback</strong>.
            That happens in the <strong>ClearDynaFormController</strong> (see the action method <strong>clearInputs</strong>).
            <p/>
            This example also demonstrates how to remove rows at runtime. Rows can be removed by the following methods in the
            <strong>DynaFormModel</strong>:
            <ul>
                <li>removeRegularRow(DynaFormRow row)</li>
                <li>removeRegularRow(int index)</li>
                <li>removeExtendedRow(DynaFormRow row)</li>
                <li>removeExtendedRow(int index)</li>
            </ul>
            <p/>
            You see here an imaginary filter mask with three rows and four input / select components in each row.
            Click on "Clear inputs" and "Remove" links to see this example in action!
        </h:panelGroup>

        <h:panelGroup layout="block" styleClass="centerExample">
            <ui:include src="/sections/dynaform/example-visitCallback.xhtml"/>            
        </h:panelGroup>

        <ui:decorate template="/templates/fourTabsDecoratorCustom.xhtml">
            <ui:param name="customTitle" value="ClearInputsExecutor"/>
            <ui:param name="customCode" value="java"/>
            <ui:define name="contentTab1">
${showcase:getFileContent('/sections/dynaform/example-visitCallback.xhtml')}
            </ui:define>
            <ui:define name="contentTab2">
${showcase:getFileContent('/org/primefaces/extensions/showcase/controller/dynaform/ClearDynaFormController.java')}
            </ui:define>
            <ui:define name="contentTab3">
${showcase:getFileContent('/org/primefaces/extensions/showcase/model/dynaform/Condition.java')}
            </ui:define>
            <ui:define name="contentTab4">
${showcase:getFileContent('/org/primefaces/extensions/showcase/controller/dynaform/ClearInputsExecutor.java')}
            </ui:define>
        </ui:decorate>
    </ui:define>
    <ui:define name="useCases">
        <ui:include src="/sections/dynaform/useCasesChoice.xhtml"/>
    </ui:define>
    <ui:define name="docuTable">
        <ui:include src="/sections/shared/twoTabsDocumentation.xhtml">
            <ui:param name="tagName1" value="dynaForm"/>
            <ui:param name="tagName2" value="dynaFormControl"/>
        </ui:include>
    </ui:define>
</ui:composition>
</html>
