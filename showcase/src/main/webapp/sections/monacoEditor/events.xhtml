<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:showcase="http://primefaces.org/ui/extensions/showcase">
<ui:composition template="/templates/showcaseLayout.xhtml">

    <f:metadata>
        <f:viewAction action="#{monacoEditorController.initEvents('code')}"/>
    </f:metadata>

    <ui:define name="centerContent">
        <f:facet name="header">
            <h:outputText value="MonacoEditor"/>
        </f:facet>
        <h:panelGroup layout="block" styleClass="centerContent">
            The Monaco widget provides forwards several events from the JavaScript API as AJAX behavior
            events for your convenience. You can use <code>&lt;p:ajax&gt;</code> to attach a server-side
            listener to the event, or the <code>on[eventname]</code> attributes to attach a client-side
            callback. In case you require more fine-tuned control or wish to listen to an event not supported
            by this widget, consider using
            <a href="https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.IStandaloneCodeEditor.html" target="_blank" rel="noopener noreferrer">Monaco editor's client-side API</a>
            directly; possibly in combination with a <code>&lt;p:remoteCommand&gt;</code> or
            <code>&lt;pe:remoteCommand&gt;</code> if you need to invoke a client-side listener.
            <br /><br />
            Supported events are:
            <ul>
                <li>blur</li>
                <li>change</li>
                <li>focus</li>
                <li>initialized (after the Monaco editor was rendered)</li>
                <li>keydown</li>
                <li>keyup</li>
                <li>mousedown</li>
                <li>mousemove</li>
                <li>mouseup</li>
                <li>paste</li>
           </ul>
            Note that if you value performance, you should avoid adding server-side listeners for frequently occurring events
            such as <code>mousemove</code> etc. In this example, we display a growl message via
            <a href="https://primefaces.github.io/primefaces/jsdocs/classes/src_PrimeFaces.PrimeFaces.widget.Growl.html#add" target="_blank" rel="noopener noreferrer">PrimeFace's client-side JavaScript API</a>
            in the <code>onstart</code> callback of the AJAX behavior and <code>return false</code> to cancel
            the AJAX request to the server; but you could call a server-side method here if you wanted.
        </h:panelGroup>

        <h:panelGroup layout="block" styleClass="centerExample">
            <ui:include src="/sections/monacoEditor/example-events.xhtml" />
        </h:panelGroup>

        <ui:decorate template="/templates/twoTabsDecorator.xhtml">
            <ui:define name="contentTab1">
${showcase:getFileContent('/sections/monacoEditor/example-events.xhtml')}
            </ui:define>
            <ui:define name="contentTab2">
${showcase:getFileContent('/org/primefaces/extensions/showcase/controller/MonacoEditorController.java')}
            </ui:define>
        </ui:decorate>
    </ui:define>
    <ui:define name="useCases">
        <ui:include src="/sections/monacoEditor/useCasesChoice.xhtml"/>
    </ui:define>
    <ui:define name="docuTable">
        <ui:include src="/sections/shared/documentation.xhtml">
            <ui:param name="tagName" value="monacoEditor"/>
        </ui:include>
    </ui:define>
</ui:composition>
</html>
