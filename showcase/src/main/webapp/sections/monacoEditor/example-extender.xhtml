<ui:composition
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:f="http://xmlns.jcp.org/jsf/core"
        xmlns:h="http://xmlns.jcp.org/jsf/html"
        xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
        xmlns:of="http://omnifaces.org/functions"
        xmlns:p="http://primefaces.org/ui"
        xmlns:pe="http://primefaces.org/ui/extensions">

<p:remoteCommand id="handleMonacoExtenderError" name="handleMonacoExtenderError"
  process="@this,monacoEditorWrapper"  partialSubmit="true"
  actionListener="#{monacoEditorController.onMonacoExtenderError}" 
  update="monacoEditorWrapper" />

<h:panelGroup id="customExtenderInline">
  <style>#{monacoEditorController.valueCss}</style>
  <script>
    (function() {
      var example = "#{empty monacoEditorController.extenderExample ? "" : of:escapeJS(monacoEditorController.extenderExample)}";
      var url = new URL(location.href);
      url.searchParams.set("example", example);
      history.replaceState(example, "Extender: " + example, url.toString());
    })();
  </script>
  <script>
    // Force the widget to reload the monaco library so people can test their extenders
    delete window.monaco;
    window.createShowcaseExtender = function(){
      var processExtenderError = function (extenderError) {
        extenderError = extenderError instanceof Error ? extenderError : new Error(extenderError);
        console.error("Could not load Monaco editor extender:", extenderError);
        var error = extenderError.stack  || extenderError.message || String(extenderError);
        handleMonacoExtenderError([
          {name: "monacoExtenderError", value: error}
        ]);
        return {};
      }
      // Retrieve extender from bean
      var content = "#{empty monacoEditorController.valueExtender ? "" : of:escapeJS(monacoEditorController.valueExtender)}";
      if (!content) {
        return {};
      }
      // Evaluate the extender
      window.createExtender = undefined;
      var globalError;
      var onGlobalError = function (message, source, lineno, colno, error) {
        var err = error || message; 
        globalError = err instanceof Error ? err : new Error(err);
      }
      var script = document.createElement("script");
      if (PrimeFaces.csp.NONCE_VALUE) {
        script.nonce = PrimeFaces.csp.NONCE_VALUE;
      }
      script.text = content;
      var prevOnError = window.onerror;
      try {
        script.onerror = onGlobalError;
        window.onerror = onGlobalError;
        document.head.appendChild(script);
      }
      catch (err) {
        return processExtenderError(err);
      }
      finally {
          window.onerror = prevOnError;
          document.head.removeChild(script);
      }
      if (globalError) {
        return processExtenderError(globalError);
      }
      // Check if script defined a global factory function
      if (typeof window.createExtender !== "function" || window.createExtender.length !== 0) {
        return processExtenderError(new Error("No Monaco extender was set, make sure to define a global function createExtender() { ... } that takes no arguments"));
      }
      // Create extender via global factory function
      var extender;
      try {
        extender = window.createExtender();
      }
      catch (e) {
        return processExtenderError(new Error("Error while evaluating extender: " + e));
      }
      // Check if factory returned an extender
      if (typeof extender !== "object" || typeof extender === null) {
        return processExtenderError(new Error("No Monaco extender was found, make sure to return the extender in the createExtender function"));
      }
      // Wrap all extender functions in a try-catch block so we can show
      // errors to the user in the showcase UI.
      for (key in extender) {
        if (Object.prototype.hasOwnProperty.call(extender, key)) {
          var value = extender[key];
          if (typeof value === "function") {
        	  extender[key] = (function(fn) {
              return function() {
                try {
                  var res = fn.apply(this, arguments);
                  if (typeof res === "object" &amp;&amp; "then" in res &amp;&amp; "catch" in res) {
                    res.catch(function(error) {
                      var message = error instanceof Error ? error.stack || error.message || String(error) : String(error);
                      handleMonacoExtenderError([
                        {name: "monacoExtenderError", value: "Error in extender." + key + "\n" + message}
                      ]);
                      throw error;
                    });
                  }
                  return res;
                }
                catch (error) {
                  var message = error instanceof Error ? error.stack || error.message || String(error) : String(error);
                  handleMonacoExtenderError([
                    {name: "monacoExtenderError", value: "Error in extender." + key + "\n" + message}
                  ]);
                  throw error;
                }
              };
            })(value);
          }
        }
      }
      return extender;
    };
  </script>
</h:panelGroup>

<!-- EXAMPLE-SOURCE-START -->

<p:staticMessage id="extenderInfo" severity="info" styleClass="monacoEditorMessage" escape="false"
  summary="#{monacoEditorController.extenderName}" detail="#{monacoEditorController.extenderInfo}" />

<h:panelGrid columns="4">
  <!-- Apply the selected extender -->
  <p:commandLink id="applyExtender" partialSubmit="true" styleClass="ui-button ui-button-text-icon-right"
    actionListener="#{monacoEditorController.onMonacoExtenderRun}"
    process="@this,extenderTabs:monacoExtender,extenderTabs:monacoCss,monacoEditorWrapper" update="customExtenderInline,monacoEditorWrapper">
    <span class="ui-button-icon-right ui-icon ui-c pi pi-play" style="color:white"></span>
    <span class="ui-button-text ui-c" style="color:white">Run</span>
  </p:commandLink>

  <!-- Select extender example -->
  <p:outputLabel for="extenderExample" value="Extender example: " />
  <p:selectOneMenu id="extenderExample" value="#{monacoEditorController.extenderExample}">
    <f:selectItems value="#{monacoEditorController.extenderExamples}" />
    <p:ajax 
      process="extenderInfo,extenderTabs:monacoExtender,extenderTabs:monacoCss,monacoEditorWrapper"
      listener="#{monacoEditorController.onExtenderExampleChange}"
      update="customExtenderInline,extenderInfo,extenderLink,extenderTabs:monacoExtender,extenderTabs:monacoCss,monacoEditorWrapper" />
  </p:selectOneMenu>
  
  <p:link id="extenderLink" href="?example=#{monacoEditorController.extenderExample}" 
    target="_blank"
    value="Link to this extender example"/>
</h:panelGrid>

<div style="display:flex">
  <!-- Monaco editor for editing the extender -->
  <p:tabView id="extenderTabs" style="flex:1">
      <p:tab id="extenderCode" title="Extender">
          <h:panelGroup id="monacoExtenderWrapper" layout="block" styleClass="monacoExtenderBox">
              <pe:monacoEditorFramed id="monacoExtender" widgetVar="monacoExtender"
                  value="#{monacoEditorController.valueExtender}" scheme="file"
                  extender="#{resource['js/monacoExtender.js']}"
                  iframeUrlParams="{extender: 'monaco', language: 'javascript', tsCheck: true, moreDeclarationUrls: ['#{of:escapeJS(resource['primefaces-extensions:monacoeditor/primefaces-monaco-global.d.ts'])}', '#{of:escapeJS(resource['primefaces-extensions:monacoeditor/primefaces-monaco-module.d.ts'])}'], moreDeclarationNames: ['file:///src/primefaces-monaco-global.d.ts', 'file:///src/primefaces-monaco-module.d.ts']}"
                  editorOptions="#{monacoEditorController.editorOptionsExtender}"
                  width="100%" height="500px" autoResize="true"
              />
          </h:panelGroup>
      </p:tab>
      <p:tab id="customCss" title="Custom CSS">
          <h:panelGroup id="monacoCssWrapper" layout="block" styleClass="monacoExtenderBox">
              <pe:monacoEditorFramed id="monacoCss" widgetVar="monacoCss"
                  value="#{monacoEditorController.valueCss}" scheme="file"
                  extender="#{resource['js/monacoExtender.js']}"
                  iframeUrlParams="{extender: 'default'}"
                  language="css"
                  editorOptions="#{monacoEditorController.editorOptionsCss}"
                  width="100%" height="500px" autoResize="true"/>
          </h:panelGroup>
      </p:tab>
  </p:tabView>

  <!-- Actual editor with the extender applied -->
  <!-- window.createShowcaseExtender wraps the createExtender function -->
  <!-- defined in the editor above to catch and display errors. -->
  <h:panelGroup id="monacoEditorWrapper" layout="block" style="flex:1" styleClass="monacoEditorBox">
      <pe:monacoEditor id="monacoEditor" widgetVar="monacoEditor"
          rendered="#{empty monacoEditorController.extenderError}"
          value="#{monacoEditorController.value}"
          extender="window.createShowcaseExtender()"
          editorOptions="#{monacoEditorController.editorOptions}"
          width="100%" height="500px" autoResize="true" />
      <h:panelGroup layout="block" 
        rendered="#{not empty monacoEditorController.extenderError}" styleClass="monacoEditorError">
        <strong>Could not load custom Monaco editor extender, error was:</strong>
        <pre>#{monacoEditorController.extenderError}</pre>
      </h:panelGroup>
  </h:panelGroup>
</div>

<!-- EXAMPLE-SOURCE-END< -->
</ui:composition>