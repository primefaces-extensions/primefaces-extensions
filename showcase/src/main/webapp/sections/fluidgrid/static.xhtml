<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="jakarta.faces.html"
      xmlns:f="jakarta.faces.core"
      xmlns:ui="jakarta.faces.facelets"
      xmlns:p="primefaces"
      xmlns:pe="primefaces.extensions"
      xmlns:showcase="primefaces.extensions.showcase">
<ui:composition template="/templates/showcaseLayout.xhtml">
    <ui:define name="centerContent">
        <f:facet name="header">
            <h:outputText value="FluidGrid"/>
        </f:facet>
        <h:panelGroup layout="block" styleClass="centerContent">
            FluidGrid allows to set up a nice tight grid with items that have variable heights and widths.
            FluidGrid is a responsive grid. That means, the grid will reflow as the window size changes.
            Items can have any content: text, images, links, input fields, etc.
            They can be defined in a static or in a dynamic way as in data iteration components.
            <p/>
            This example demonstrates a simple usage with static items. Static items are defined by
            the tag <strong>pe:fluidGridItem</strong> which can be placed multiple times below
            the main tag <strong>pe:fluidGrid</strong>. Items can have different width / height
            specified by style classes. The main container for the <strong>pe:fluidGrid</strong>
            has the style class <strong>pe-fluidgrid</strong> and the container of the <strong>pe:fluidGridItem</strong>
            has the style class <strong>pe-fluidgrid-item</strong>.
            <p/>
            In the example we used two attributes <strong>hGutter</strong>
            and <strong>vGutter</strong> for horizontal and vertical space between items.
            Click on the button below and resize the browser to test the fluid grid!
        </h:panelGroup>
        
        <h:panelGroup layout="block" styleClass="centerExample">
            <p:button outcome="/sections/fluidgrid/examples/static.jsf"
                      value="Show fluid grid" target="_blank"/>
        </h:panelGroup>
        
        <ui:decorate template="/templates/oneTabDecorator.xhtml">
            <ui:define name="contentTab1">
${showcase:getFileContent('/sections/fluidgrid/examples/example-static.xhtml')}
            </ui:define>
        </ui:decorate>
    </ui:define>
    <ui:define name="useCases">
        <ui:include src="/sections/fluidgrid/useCasesChoice.xhtml"/>
    </ui:define>
    <ui:define name="docuTable">
        <ui:include src="/sections/shared/twoTabsDocumentation.xhtml">
            <ui:param name="tagName1" value="fluidGrid"/>
            <ui:param name="tagName2" value="fluidGridItem"/>
        </ui:include>
    </ui:define>
</ui:composition>
</html>