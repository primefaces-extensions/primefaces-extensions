<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="jakarta.faces.html"
      xmlns:f="jakarta.faces.core"
      xmlns:ui="jakarta.faces.facelets"
      xmlns:p="primefaces"
      xmlns:pe="primefaces.extensions"
      xmlns:showcase="primefaces.extensions.showcase">
<ui:composition template="/templates/showcaseLayout.xhtml">
    <ui:define name="centerContent">
        <f:facet name="header">
            <h:outputText value="FluidGrid"/>
        </f:facet>
        <h:panelGroup layout="block" styleClass="centerContent">
            FluidGrid allows to set up a nice tight grid with items that have variable heights and widths.
            FluidGrid is a responsive grid. That means, the grid will reflow as the window size changes.
            Items can have any content: text, images, links, input fields, etc.
            They can be defined in a static or in a dynamic way as in data iteration components.
            <p/>
            This example demonstrates a simple usage with dynamic items. Dynamic items can be put in a collection or list
            of <strong>FluidGridItem</strong> instances. A <strong>FluidGridItem</strong> instance contains
            a data object (of any data types) and an optional <strong>type</strong> property to match the type attribute in
            <strong>pe:fluidGridItem</strong> (see the example with dynamic form).
            Dynamic items can be accessed in XHTML via the <strong>value</strong> attribute and exposed
            via the <strong>var</strong> attribute. Click on the button below and resize the browser to test the fluid grid!
            <p/>
            <strong>Note:</strong> The attribute <strong>hasImages</strong> is set to true to fix overlapping of items
            which are caused by unloaded images. If this attribute is set to true, the grid layout will be triggered
            after all images have been loaded and items have their proper sizes. The example also demonstrates
            the event <strong>layoutComplete</strong> which is fired after a layout of fluid grid and all
            positioning transitions have been completed.
        </h:panelGroup>
        
        <h:panelGroup layout="block" styleClass="centerExample">
            <p:button outcome="/sections/fluidgrid/examples/dynamic.jsf"
                      value="Show fluid grid" target="_blank"/>
        </h:panelGroup>
        
        <ui:decorate template="/templates/threeTabsDecoratorModel.xhtml">
            <ui:define name="contentTab1">
${showcase:getFileContent('/sections/fluidgrid/examples/example-dynamic.xhtml')}
            </ui:define>
            <ui:define name="contentTab2">
${showcase:getFileContent('/org/primefaces/extensions/showcase/controller/fluidgrid/FluidGridDynamicController.java')}
            </ui:define>
            <ui:define name="contentTab3">
${showcase:getFileContent('/org/primefaces/extensions/showcase/model/fluidgrid/Image.java')}
            </ui:define>
        </ui:decorate>
    </ui:define>
    <ui:define name="useCases">
        <ui:include src="/sections/fluidgrid/useCasesChoice.xhtml"/>
    </ui:define>
    <ui:define name="docuTable">
        <ui:include src="/sections/shared/twoTabsDocumentation.xhtml">
            <ui:param name="tagName1" value="fluidGrid"/>
            <ui:param name="tagName2" value="fluidGridItem"/>
        </ui:include>
    </ui:define>
</ui:composition>
</html>