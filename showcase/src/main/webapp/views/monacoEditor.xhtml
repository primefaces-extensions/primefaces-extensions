<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets">
<ui:composition template="/templates/showcaseLayout.xhtml">
    <ui:define name="centerContent">
        <f:facet name="header">
            <h:outputText value="MonacoEditor"/>
        </f:facet>
        <h:panelGroup layout="block" styleClass="centerContent">
            The Monaco Editor is the code editor which powers <a href="https://github.com/Microsoft/vscode">VS Code</a>,
            with the features better described <a href="https://code.visualstudio.com/docs/editor/editingevolved" target="_blank"
                                                  rel="noopener noreferrer">here</a>.
            <br/><br/>
            The editor provides a rich coding experience with IntelliSense and validation for a few select languages, namely
            JavaScript/TypeScript, CSS / LESS /SCSS, and JSON; including but not limited to syntax highlighting, code completion and
            refactoring. Furthermore, basic support such as syntax highlighting is available for many mor languages, see the list below.
            <br/><br/>
            It also supports localization and comes with support for a few major languages out-of-the-box.
            <br/>
            <h:graphicImage library="images" name="monacoeditor.png" alt="MonacoEditor(VSCode logo)" width="64" height="64"/>
            This component is a wrapper that allows Monaco Editor to be used as a JSF component.
            <br/><br/>
            The monaco editor library is developed by Microsoft and released under a MIT License. You can find their official GitHub repo
            <a href="https://github.com/Microsoft/monaco-editor" target="_blank" rel="noopener noreferrer">here</a>.
            <br/><br/>
            The Monaco Editor component has been developed with customizability in mind. You can specify and extender to configure
            the editor via custom JavaScript in any way you like via the official <a href="https://microsoft.github.io/monaco-editor/api/index.html"
                                                                                     target="_blank" rel="noopener noreferrer">
            client-side API.</a> This JSF component comes in four varieties:
            <ul>
                <li>The <code>pe:monacoEditor</code> renders the editor inline in the page where you include it. This is usually more
                    efficient and the preferred way when you do not need different editors with a different global configuration.
                </li>
                <li>The <code>pe:monacoEditorFramed</code> renders the editor in an iframe for improved encapsulation. Part of the
                    Monaco Editor configuration is window global, such as the loaded TypeScript declaration files for improved JavaScript
                    IntelliSense. If you wish to use multiple editors with a completely different setup, consider using the framed variant.
                </li>
                <li>The <code>pe:monacoDiffEditor</code> renders a diff editor for comparing two files inline in the page where you include it.
                    This is usually more efficient and the preferred way when you do not need different editors with a different global configuration.
                </li>
                <li>The <code>pe:monacoDiffEditorFramed</code> renders a diff editor for comparing two files in an iframe for improved encapsulation.
                    Part of the Monaco Editor configuration is window global, such as the loaded TypeScript declaration files for improved JavaScript
                    IntelliSense. If you wish to use multiple editors with a completely different setup, consider using the framed variant.
                </li>
            </ul>
            All variants share almost the same API with a few minor differences regarding a few client-side widget methods and how
            you specifiy the extender. The diff editor has some additional properties for the the settings of the original (left) editor
            against which the value is compared. As the framed variant runs inside an iframe, all interactions with the editor is handled
            via <code>postMessage</code> and thus neccesarily asynchronous. The API makes heavy use of Promises.
            <br/><br/>
            While PrimeFaces extensions does not have TypeScript declarations in general yet, the client side API of this component
            is fully typed and checked against the PrimeFaces type: 
            <a href="https://github.com/primefaces-extensions/primefaces-extensions/blob/master/core/src/main/resources/META-INF/resources/primefaces-extensions/monacoeditor/primefaces-monaco-global.d.ts" target="_blank" rel="noopener noreferrer">primefaces-monaco-global.d.ts</a>, 
            <a href="https://github.com/primefaces-extensions/primefaces-extensions/blob/master/core/src/main/resources/META-INF/resources/primefaces-extensions/monacoeditor/primefaces-monaco-module.d.ts" target="_blank" rel="noopener noreferrer">primefaces-monaco-module.d.ts</a>
            <br/><br/>
            Note that this is a code editor, not at all unlike CodeMirror. Especially for the languages with IntelliSense support (see above) this
            editor can provide a fuller and more pleasing experience. However, there are a few things to keep in mind:
            <ul>
                <li>
                    Microsoft's statement regarding IE support: <q>The Monaco Editor no longer supports IE 11. The last version that was tested on IE 11 is
                    0.18.1.</q>
                </li>
                <li>
                    It is assumed that users are using a browser with support for the <a
                        href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank"
                        rel="noopener noreferrer">Promise API</a>.
                    Every browser other than IE, which is unsupported anyways,
                    <a href="https://caniuse.com/promises" target="_blank" rel="noopener noreferrer">now supports Promises.</a>
                    When for some reason support for the Promise API should not be available, you can simply include an <a
                        href="https://github.com/zloirock/core-js" target="_blank" rel="noopener noreferrer">appropriate polyfill</a>.
                    While untested, it may also be possible to support IE 11 this way.
                </li>
                <li>Also, the Monaco editor is not supported in mobile browsers or mobile web frameworks. In practice this means there is not dedicated
                    user interface for small screens or special controls for entering code on mobile devices. A larger tablet with an external keyboard and
                    possibly a mouse should work just fine, but make sure you test your use-case scenario.
                </li>
            </ul>
            <strong>Basic support including syntax highlighting is available for the following languages:</strong> <br/>
            (but also check the official docs, more languages may have been added in the mean time)
            <ul>
                <ui:repeat var="language" value="#{monacoEditorController.languages}">
                    <li>#{language.toString()}</li>
                </ui:repeat>
            </ul>
        </h:panelGroup>
    </ui:define>
    <ui:define name="useCases">
        <ui:include src="/sections/monacoEditor/useCasesChoice.xhtml"/>
    </ui:define>
    <ui:define name="docuTable">
        <ui:include src="/sections/shared/documentation.xhtml">
            <ui:param name="tagName" value="monacoEditor"/>
        </ui:include>
    </ui:define>
</ui:composition>
</html>
